<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>net5.0;netcoreapp3.0;netcoreapp2.0;net46</TargetFrameworks>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Authors>Alethic Solutions</Authors>
        <Company>Alethic Solutions</Company>
        <Description>BoolExprNet is a .NET wrapper around the Boolexpr open source C++ library for symbolic Boolean algebra.</Description>
        <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
        <PackageProjectUrl>https://github.com/wasabii/BoolExprNet/</PackageProjectUrl>
        <RepositoryUrl>https://github.com/wasabii/BoolExprNet.git</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
    </PropertyGroup>

    <ItemGroup>
        <LibProjectReference Include="boolexpr-win-x86">
            <CMakePath>..\boolexpr32</CMakePath>
            <ProjectFile>..\boolexpr32\boolexpr32.vcxproj</ProjectFile>
            <Platform>Win32</Platform>
            <Configuration>$(Configuration)</Configuration>
            <OutputDir>runtimes\win-x86\native</OutputDir>
        </LibProjectReference>
        <LibProjectReference Include="boolexpr-win-x64">
            <CMakePath>..\boolexpr64</CMakePath>
            <ProjectFile>..\boolexpr64\boolexpr64.vcxproj</ProjectFile>
            <Platform>x64</Platform>
            <Configuration>$(Configuration)</Configuration>
            <OutputDir>runtimes\win-x64/native</OutputDir>
        </LibProjectReference>
        <LibProjectReference Include="boolexpr-linux-x86">
            <ProjectFile>..\libboolexpr\libboolexpr.vcxproj</ProjectFile>
            <Platform>x64</Platform>
            <Configuration>$(Configuration)</Configuration>
            <OutputDir>runtimes\linux-x64\native</OutputDir>
        </LibProjectReference>
        <LibProjectReference Include=".boolexpr-linux-x64">
            <ProjectFile>..\libboolexpr\libboolexpr.vcxproj</ProjectFile>
            <Platform>x86</Platform>
            <Configuration>$(Configuration)</Configuration>
            <OutputDir>runtimes\linux-x86\native</OutputDir>
        </LibProjectReference>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="System.ValueTuple" Version="4.5.0" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netcoreapp3.0'">
        <PackageReference Include="System.Runtime.Loader">
            <Version>4.3.0</Version>
        </PackageReference>
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netcoreapp2.0'">
        <PackageReference Include="System.Runtime.Loader">
            <Version>4.3.0</Version>
        </PackageReference>
    </ItemGroup>

    <Target Name="GenLibProject" BeforeTargets="Build" Inputs="@(LibProjectReference->'%(CMakePath)\CMakeLists.txt')" Outputs="%(LibProjectReference.ProjectFile)">
        <Exec WorkingDirectory="%(LibProjectReference.CMakePath)" Command="&quot;$(DevEnvDir)CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe&quot; -G &quot;Visual Studio 16 2019&quot; -A %(LibProjectReference.Platform) ."  Condition=" '%(LibProjectReference.CMakePath)' != '' "/>
    </Target>

    <Target Name="GetLibContent" BeforeTargets="GetCopyToOutputDirectoryItems" DependsOnTargets="GenLibProject" Condition="'$(DesignTimeBuild)' != 'true'">
        <MSBuild Projects="@(LibProjectReference->'%(ProjectFile)')" Targets="GetTargetPath" Properties="Platform=%(LibProjectReference.Platform);Configuration=%(LibProjectReference.Configuration)">
            <Output TaskParameter="TargetOutputs" ItemName="LibTargets" />
        </MSBuild>
        <ItemGroup>
            <ContentWithTargetPath Include="@(LibTargets)">
                <CopyToOutputDirectory>Always</CopyToOutputDirectory>
                <TargetPath>%(OutputDir)\%(Filename)%(Extension)</TargetPath>
                <AssetGroup>native</AssetGroup>
            </ContentWithTargetPath>
            <ContentWithTargetPath Include="@(LibTargets->'%(Rootdir)%(Directory)%(Filename).pdb')" Condition="Exists('@(LibTargets->'%(Rootdir)%(Directory)%(Filename).pdb')')">
                <CopyToOutputDirectory>Always</CopyToOutputDirectory>
                <TargetPath>%(OutputDir)\%(Filename).pdb</TargetPath>
            </ContentWithTargetPath>
        </ItemGroup>
    </Target>

    <Target Name="BuildLib" BeforeTargets="Compile" DependsOnTargets="GetLibContent" Inputs="@(LibProjectReference-&gt;'%(ProjectFile)" Outputs="@(LibProjectReference->'%(Identity)\%(Configuration)\%(Name).dll')" Condition="'$(DesignTimeBuild)' != 'true'">
        <Message Text="BuildLib: %(LibProjectReference.ProjectFile)" Importance="high" />
        <MSBuild Projects="@(LibProjectReference->'%(ProjectFile)')" Targets="Build" Properties="Platform=%(LibProjectReference.Platform);Configuration=%(LibProjectReference.Configuration)">
            <Output TaskParameter="TargetOutputs" ItemName="LibOutputs" />
        </MSBuild>
    </Target>

    <Target Name="__GetPackageFiles" AfterTargets="_GetPackageFiles" DependsOnTargets="GetLibContent">
        <ItemGroup>
            <_PackageFiles Include="@(LibTargets)">
                <BuildAction>None</BuildAction>
                <Pack>true</Pack>
                <PackagePath>%(OutputDir)\%(Filename)%(Extension)</PackagePath>
            </_PackageFiles>
            <_PackageFiles Include="@(LibTargets->'%(Rootdir)%(Directory)%(Filename).pdb')" Condition="Exists('@(LibTargets->'%(Rootdir)%(Directory)%(Filename).pdb')')">
                <BuildAction>None</BuildAction>
                <Pack>true</Pack>
                <PackagePath>%(OutputDir)\%(Filename).pdb</PackagePath>
            </_PackageFiles>
        </ItemGroup>
    </Target>

</Project>
